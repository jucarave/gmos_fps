<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;
z_speed = 0;
z_direction = 0;
z_target = 0;
height = 16;

jog = 0;
jog_dir = 1;

jump_spd = 0;
jump_dir = 0;

prev_grid_x = floor(x / GRID_W);
prev_grid_y = floor(y / GRID_W);

state = SM_STAND;

screenX = window_get_x() + 320;
screenY = window_get_y() + 240;

display_mouse_set(screenX, screenY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global._ZGRAVITY &amp;&amp; z_speed &lt; 0){ 
    z_speed = 0; 
    state = SM_STAND; 
}

if (state == SM_JUMP){
    z += z_speed;
    z_speed -= obj_room_master.zgravity;
    
    if (z_speed &gt; 0){
        var z_ceil = ds_grid_get(obj_room_master.ceil_z_grid, floor(x / GRID_W), floor(y / GRID_W));
        if (z_ceil &gt; -100 &amp;&amp; z+height+2 &gt;= z_ceil){
            z = z_ceil - height - 2;
            z_speed = 0;
        }
    }else if (z_speed &lt; 0){
        var z_floor = ds_grid_get(obj_room_master.floor_z_grid, floor(x / GRID_W), floor(y / GRID_W));
        if (z &lt;= z_floor){
            z = z_floor;
            z_target = z;
            z_speed = 0;
            jump_spd = 0;
            state = SM_STAND;
        }
    }
    
    if (jump_spd &gt; 0){
        scr_move_to(jump_dir, jump_spd);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Running with keyboard
if (state == SM_STAND){
    if (keyboard_check(vk_shift)){
        state = SM_RUN;
    }
}else if (state == SM_RUN){
    if (!keyboard_check(vk_shift)){
        state = SM_STAND;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global._ZGRAVITY &amp;&amp; (state == SM_STAND || state == SM_RUN || state == SM_CROUCH)){
    // Search next z target
    var gx = floor(x / GRID_W);
    var gy = floor(y / GRID_W);
    
    if (gx != prev_grid_x || gy != prev_grid_y){
        var zt = ds_grid_get(obj_room_master.floor_z_grid, floor(x / GRID_W), floor(y / GRID_W));
        if ((zt - z_target &lt;= 5 &amp;&amp; zt &gt; z_target) || (zt &lt; z_target)){
            z_target = zt;
        }
    }
    
    prev_grid_x = gx;
    prev_grid_y = gy;
    
    // Move to target
    if (z &lt; z_target){
        z += 2;
        if (z &gt;= z_target){ z = z_target; }
    }else if (z &gt; z_target){
        state = SM_JUMP;
        
        jump_dir = scr_get_input_direction();
        if (jump_dir != -1){
            jump_spd = 3;
            if (state == SM_CROUCH){ jump_spd = 1.5; }else
            if (state == SM_RUN){ jump_spd = 5; }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// End Game with keyboard
if (keyboard_check_pressed(vk_escape)){
    game_end();
}

// Stop all player actions if the console is open
if (instance_exists(obj_hud_debug)){
    if (obj_hud_debug.open){ 
        exit; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement with keyboard...

if (state == SM_STAND || state == SM_CROUCH || state == SM_RUN){
    var dir = scr_get_input_direction();
    
    if (dir != -1 ){
        var spd = 3;
        if (state == SM_CROUCH){ spd = 1.5; }else
        if (state == SM_RUN){ spd = 5; }
        
        scr_move_to(dir, spd);
        
        jog += jog_dir * 0.3;
        if (jog &gt;= 2 &amp;&amp; jog_dir == 1){ jog = 2; jog_dir = -1; }
        if (jog &lt;= -2 &amp;&amp; jog_dir == -1){ jog = -2; jog_dir = 1; }
    }else{
        if (jog != 0){
            if (jog &gt; 0) dir = -1; else dir = 1;
            
            jog += dir * 0.5;
            if (jog &lt;= 0 &amp;&amp; dir == -1){ jog = 0; jog_dir = 1; }
            if (jog &gt;= 0 &amp;&amp; dir == 1){ jog = 0; jog_dir = 1; }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Crouching with keyboard
if (state == SM_STAND){
    if (height &lt; 16) height += 1;
    if (keyboard_check(vk_control)){
        state = SM_CROUCH;
    }
}else if (state == SM_CROUCH){
    if (height &gt; 8) height -= 1;
    if (!keyboard_check(vk_control)){
        state = SM_STAND;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotation with keyboard

var hor = (keyboard_check(vk_left) - keyboard_check(vk_right));

if (hor != 0){
    direction += 3 * hor;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotation with mouse

if (global._MLOOK){
    var mx = display_mouse_get_x() - screenX;
    var my = display_mouse_get_y() - screenY;
    
    if (mx != 0 || my != 0){
        direction -= mx / 3;
        z_direction -= my / 3;
        
        if (z_direction &gt; 45) z_direction = 45;
        else if (z_direction &lt; -45) z_direction = -45;
        
        display_mouse_set(screenX, screenY);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Execute actions

if (keyboard_check_pressed(ord('E'))){
    var tar_x = x + cos(degtorad(direction)) * GRID_W;
    var tar_y = y - sin(degtorad(direction)) * GRID_W;
    
    var ins = collision_line(x, y, tar_x, tar_y, obj_door, false, false);
    if (ins){
        if (ins.z-GRID_HW &lt; z+height &amp;&amp; ins.z+GRID_HW &gt; z){
            ins.activated = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Jumping
if ((state == SM_STAND || state == SM_RUN) &amp;&amp; keyboard_check_pressed(vk_space)){
    z_speed = 4;
    
    jump_spd = 0;
    jump_dir = scr_get_input_direction();
    
    if (jump_dir != -1){
        jump_spd = 3;
        if (state == SM_RUN){ jump_spd = 5; }
    }
    
    state = SM_JUMP;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xt = x + cos(degtorad(direction));
var yt = y - sin(degtorad(direction));
var zt = z + height + jog + sin(degtorad(z_direction));

d3d_set_projection(x, y, z + height + jog, xt, yt, zt, 0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
