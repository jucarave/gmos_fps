<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;
height = 16;
zdirection = 0;

jog = 0;
jog_dir = 1;

state = SM_STAND;

screenX = window_get_x() + 320;
screenY = window_get_y() + 240;

display_mouse_set(screenX, screenY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// End Game with keyboard
if (keyboard_check_pressed(vk_escape)){
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Stop all player actions if the console is open

if (instance_exists(obj_hud_debug)){
    if (obj_hud_debug.open){ 
        exit; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement with keyboard...

var dir = scr_get_input_direction();

if (dir != -1){
    var spd = 3;
    if (state == SM_CROUCH){ spd = 1.5; }else
    if (state == SM_RUN){ spd = 5; }
    
    var xTo = cos(degtorad(dir));
    var yTo = sin(degtorad(dir));
    
    var size = GRID_HW - 2;
    
    var ofx = size;
    var ofy = size;
    
    if (xTo &lt; 0) ofx = -size;
    if (yTo &lt; 0) ofy = -size;
    
    var ins = scr_collision_box(x, y-size, z, (x+ofx)+(xTo*6), y+size, z+GRID_HW);
    if (!ins){
        x += xTo * spd;
    }
    
    var ins = scr_collision_box(x-size, y, z, x+size, (y-ofy)-(yTo*6), z+GRID_HW);
    if (!ins){
        y -= yTo * spd;
    }
    
    jog += jog_dir * 0.3;
    if (jog &gt;= 2 &amp;&amp; jog_dir == 1){ jog = 2; jog_dir = -1; }
    if (jog &lt;= -2 &amp;&amp; jog_dir == -1){ jog = -2; jog_dir = 1; }
}else{
    if (jog != 0){
        if (jog &gt; 0) dir = -1; else dir = 1;
        
        jog += dir * 0.5;
        if (jog &lt;= 0 &amp;&amp; dir == -1){ jog = 0; jog_dir = 1; }
        if (jog &gt;= 0 &amp;&amp; dir == 1){ jog = 0; jog_dir = 1; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Crouching with keyboard
if (state == SM_STAND){
    if (height &lt; 16) height += 1;
    if (keyboard_check(vk_control)){
        state = SM_CROUCH;
    }
}else if (state == SM_CROUCH){
    if (height &gt; 8) height -= 1;
    if (!keyboard_check(vk_control)){
        state = SM_STAND;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Running with keyboard
if (state == SM_STAND){
    if (keyboard_check(vk_shift)){
        state = SM_RUN;
    }
}else if (state == SM_RUN){
    if (!keyboard_check(vk_shift)){
        state = SM_STAND;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotation with keyboard

var hor = (keyboard_check(ord('Q')) - keyboard_check(ord('E')));

if (hor != 0){
    direction += 3 * hor;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotation with mouse

if (CONF_MOUSE_VIEW){
    var mx = display_mouse_get_x() - screenX;
    var my = display_mouse_get_y() - screenY;
    
    if (mx != 0 || my != 0){
        direction -= mx / 3;
        zdirection -= my / 3;
        
        if (zdirection &gt; 45) zdirection = 45;
        else if (zdirection &lt; -45) zdirection = -45;
        
        display_mouse_set(screenX, screenY);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Execute actions

if (keyboard_check_pressed(vk_space)){
    var tar_x = x + cos(degtorad(direction)) * GRID_W;
    var tar_y = y - sin(degtorad(direction)) * GRID_W;
    
    var ins = collision_line(x, y, tar_x, tar_y, obj_door, false, false);
    if (ins){
        ins.activated = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xt = x + cos(degtorad(direction));
var yt = y - sin(degtorad(direction));
var zt = z + height + jog + sin(degtorad(zdirection));

d3d_set_projection(x, y, z + height + jog, xt, yt, zt, 0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
